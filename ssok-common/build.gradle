plugins {
    id 'java'
//    alias(libs.plugins.springBoot)
//    alias(libs.plugins.dependencyManagement)
    // protobuf 플러그인
    alias(libs.plugins.protobufPlugin)
}

repositories {
    mavenCentral()
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Testing
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    // Spring Core 의존성
    implementation 'org.springframework:spring-context:5.3.30'
    implementation 'org.springframework:spring-core:5.3.30'
    implementation 'org.springframework:spring-orm:5.3.30'
    implementation 'org.springframework:spring-tx:5.3.30'

    // JPA 및 Hibernate 의존성
    implementation 'org.springframework.data:spring-data-jpa:3.2.3'
    implementation 'org.hibernate.orm:hibernate-core:6.4.4.Final'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    // gRPC 라이브러리
    implementation(libs.grpcStub)
    implementation(libs.grpcProtobuf)
    runtimeOnly(libs.grpcNetty)

    // 컴파일 에러 방지용 어노테이션 라이브러리
    compileOnly(libs.jakartaAnnotation)

    // AOP 설정 추가
    implementation 'org.aspectj:aspectjweaver:1.9.19'
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'
    implementation 'org.aspectj:aspectjrt:1.9.19'


}

//// bootJar 비활성화
//bootJar {
//    enabled = false
//}
//
// jar 활성화
jar {
    enabled = true
}

test {
    useJUnitPlatform()
}

// protobuf 설정
protobuf {
    protoc {
        // Protocol Buffers 컴파일러
        artifact = libs.protobufCompiler.get().toString()
    }
    plugins {
        grpc {
            // gRPC Java 코드 생성용 플러그인 (Stub, Service 등)
            artifact = libs.grpcCodegen.get().toString()
        }
    }
    generateProtoTasks {
        all().configureEach {
            plugins {
                grpc {}
            }
        }
    }
}
