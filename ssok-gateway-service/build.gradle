plugins {
    id 'java'
    alias(libs.plugins.springBoot)
    alias(libs.plugins.dependencyManagement)
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation(project(':ssok-common')) {
        exclude group: 'io.grpc', module: 'grpc-core'
        exclude group: 'io.grpc', module: 'grpc-stub'
        exclude group: 'io.grpc', module: 'grpc-protobuf'
        exclude group: 'io.grpc', module: 'grpc-netty-shaded'
    }

    // Spring Boot WebFlux (Gateway는 WebFlux 기반)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Spring Cloud Gateway
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    
    // gRPC 의존성 (Spring Cloud Gateway 3.x에서 필요)
    implementation libs.grpcNetty
    implementation libs.grpcStub
    implementation libs.grpcProtobuf

    // Spring Cloud Kubernetes
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-client-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    
    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Logback
    implementation libs.logback

    // Lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${libs.versions.springCloud.get()}")
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register("prepareKotlinBuildScriptModel"){}