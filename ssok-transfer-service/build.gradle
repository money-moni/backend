plugins {
    alias(libs.plugins.springBoot)
    alias(libs.plugins.dependencyManagement)
    // protobuf 플러그인
    alias(libs.plugins.protobufPlugin)
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Common 모듈 의존성
    implementation project(':ssok-common')

    // Spring boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // swagger
    implementation libs.swagger

    // Spring Cloud Dependencies
    implementation libs.springCloud

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // OpeneFeign
    implementation libs.openfeign

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Kubernetes Config
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-client-config'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

    // queryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // H2(테스트용)
    runtimeOnly 'com.h2database:h2'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka:3.3.4'

    // Logback
    implementation libs.logback

    // gRPC 라이브러리
    implementation(libs.grpcStub)
    implementation(libs.grpcProtobuf)
    runtimeOnly(libs.grpcNetty)

    // 컴파일 에러 방지용 어노테이션 라이브러리
    compileOnly(libs.jakartaAnnotation)
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${libs.versions.springCloud.get()}")
    }
}

// querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 저장
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(generated)
}

// java source set에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += "$projectDir/build/generated"
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register("prepareKotlinBuildScriptModel"){}

// protobuf 설정
protobuf {
    protoc {
        // Protocol Buffers 컴파일러
        artifact = libs.protobufCompiler.get().toString()
    }
    plugins {
        grpc {
            // gRPC Java 코드 생성용 플러그인 (Stub, Service 등)
            artifact = libs.grpcCodegen.get().toString()
        }
    }
    generateProtoTasks {
        all().configureEach {
            plugins {
                grpc {}
            }
        }
    }
}
